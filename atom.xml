<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Step by Step</title>
  
  <subtitle>永远在路上</subtitle>
  <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/"/>
  <updated>2020-11-23T09:53:41.330Z</updated>
  <id>https://github.com/YZHyaa/YZHyaa.github.io.git/</id>
  
  <author>
    <name>A minor</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/2020/09/24/test/"/>
    <id>https://github.com/YZHyaa/YZHyaa.github.io.git/2020/09/24/test/</id>
    <published>2020-09-23T16:00:13.688Z</published>
    <updated>2020-11-23T09:53:41.330Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start。。。。"><a href="#Quick-Start。。。。" class="headerlink" title="Quick Start。。。。"></a>Quick Start。。。。</h2><h2 id="测试html"><a href="#测试html" class="headerlink" title="测试html"></a>测试html</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/2020/09/23/hello-world/"/>
    <id>https://github.com/YZHyaa/YZHyaa.github.io.git/2020/09/23/hello-world/</id>
    <published>2020-09-23T15:59:36.516Z</published>
    <updated>2019-02-24T18:45:39.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="你好啊！"><a href="#你好啊！" class="headerlink" title="你好啊！"></a>你好啊！</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My first</title>
    <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/2019/02/25/My-New-Post%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://github.com/YZHyaa/YZHyaa.github.io.git/2019/02/25/My-New-Post%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2019-02-24T19:38:18.000Z</published>
    <updated>2019-02-24T19:39:16.276Z</updated>
    
    <content type="html"><![CDATA[<p>see  you !</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;see  you !&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My first</title>
    <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/2019/02/25/My-New-Post/"/>
    <id>https://github.com/YZHyaa/YZHyaa.github.io.git/2019/02/25/My-New-Post/</id>
    <published>2019-02-24T19:38:18.000Z</published>
    <updated>2019-02-24T19:39:16.276Z</updated>
    
    <content type="html"><![CDATA[<p>see  you !</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;see  you !&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>String源码分析</title>
    <link href="https://github.com/YZHyaa/YZHyaa.github.io.git/2016/07/13/String&amp;%E6%BA%90%E7%A0%81/"/>
    <id>https://github.com/YZHyaa/YZHyaa.github.io.git/2016/07/13/String&amp;%E6%BA%90%E7%A0%81/</id>
    <published>2016-07-13T12:46:25.000Z</published>
    <updated>2020-11-23T13:49:21.275Z</updated>
    
    <content type="html"><![CDATA[<p>反反复复发 <a id="more"></a></p><p>字符串 String 是我们平常使用最多的类型，所以，这篇我们就来看看字符串的源码  </p><!-- more --><h1 id="1-结构"><a href="#1-结构" class="headerlink" title="1.结构"></a>1.结构</h1><pre><code class="java">public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {    /**     * 1.final会被jvm缓存，提高了性能     * 2.fianl变量线程安全，节省了线程同步的开销     * 正因为是final的，所有不可变，即所有String都是新的     * 注：这个数组是不可变的，不存在容器的扩容问题     */    private final char value[];    // 空参构造 如果只是new String()那么只会产生一个空数组    public String() {      this.value = new char[0];    }    // char[]构造，调用 Arrays.copyOf    // 注：Arrays.copyOf是拷贝后返回一个新数组，system.arrayCopy是可以对目标数组拷贝    public String(char value[]) {        this.value = Arrays.copyOf(value, value.length);    }    // 常用于subString方法，实际是调用Arrays.copyOfRange(部分拷贝)    public String(char value[], int offset, int count) {        if (offset &lt; 0) {            throw new StringIndexOutOfBoundsException(offset);        }        if (count &lt; 0) {            throw new StringIndexOutOfBoundsException(count);        }        // Note: offset or count might be near -1&gt;&gt;&gt;1.        if (offset &gt; value.length - count) {            throw new StringIndexOutOfBoundsException(offset + count);        }        this.value = Arrays.copyOfRange(value, offset, offset+count);    }    // 构造器有很多，这里只列举3个.....}    </code></pre><h2 id="1-1-实现的接口"><a href="#1-1-实现的接口" class="headerlink" title="1.1 实现的接口"></a>1.1 实现的接口</h2><ul><li>Serializable : 序列化，string可以写到io流中，并可保存整个对象以及用于网络传输</li></ul><pre><code class="java">private static final long serialVersionUID = -6849794470754667710L;</code></pre><ul><li>Comparable : 比较同类型的两个对象。必须重写compareTo方法，若返回值&gt;0则，当前字符串小于另一个字符串</li></ul><pre><code class="java">// 注：只有在实现Compareable时指定了泛型，这里才会是myString ====&gt; 指定泛型是必要的public int compareTo(String anotherString) {        int len1 = value.length;        int len2 = anotherString.value.length;        int lim = Math.min(len1, len2);        char v1[] = value;        char v2[] = anotherString.value;        // 1.先逐个字符比较，若遇见不同了，即使A比B长，但B[i]&gt;A[i]，那么也是B&gt;A        int k = 0;        while (k &lt; lim) {            char c1 = v1[k];            char c2 = v2[k];            // 不相同，就ASCII相减            if (c1 != c2) {                return c1 - c2;            }            k++;        }        // 2.再比较长度        return len1 - len2;    }</code></pre><ul><li>CharSequence：CharSequence与String都能用于定义字符串，但CharSequence的值是可读可写序列，而String的值是只读序列</li></ul><h2 id="1-2-final-与不变性"><a href="#1-2-final-与不变性" class="headerlink" title="1.2  final 与不变性"></a>1.2  final 与不变性</h2><ul><li>String 被 final 修饰，说明 String 类绝不可能被继承了，也就是说任何对 String 的操作方法，都不会被继承覆写</li><li>String 中保存数据的是一个 char 的数组 value。我们发现 value 也是被 final 修饰的，也就是说 value 一旦被赋值，内存地址是绝对无法修改的，而且 value 的权限是 private 的，外部绝对访问不到，String 也没有开放出可以对 value 进行赋值的方法，所以说 value 一旦产生，内存地址就根本无法被修改。</li><li>final的作用 <ul><li>final关键字提高了性能，JVM缓存了final变量</li><li><strong>final变量线程安全，节省了多线程环境下同步的开销</strong></li><li>JVM会对final方法及变量进行优化</li></ul></li></ul><p><strong>String通过充分利用final关键字实现了<code>不变性</code>，所以string的绝大多数写法都是返回新的string</strong></p><p>两个string不变性的示例</p><ul><li>demo1:</li></ul><pre><code class="java">String str =&quot;hello world !!&quot;;// 这种写法是替换不掉的，必须接受 replace 方法返回的参数才行，这样才行：str = str.replace(&quot;l&quot;,&quot;dd&quot;);str.replace(&quot;l&quot;,&quot;dd&quot;);</code></pre><ul><li>demo2:</li></ul><pre><code class="java">String s =&quot;hello&quot;;s =&quot;world&quot;;</code></pre><p>从代码上来看，s 的值好像被修改了，但从 debug 的日志来看，其实是 s 的内存地址已经被修改了，也就说 s =“world” 这个看似简单的赋值，其实已经把 s 的引用指向了新的 String，debug 的截图显示内存地址已经被修改，两张截图如下：</p><p><img src="https://img1.sycdn.imooc.com/5d5fc04a0001c6a508840096.png" width="55%"></p><p><img src="https://img1.sycdn.imooc.com/5d5fc06400019cc210540090.png" width="55%"></p><h2 id="1-3-new与不new的问题"><a href="#1-3-new与不new的问题" class="headerlink" title="1.3 new与不new的问题"></a>1.3 new与不new的问题</h2><pre><code class="java">String str = &quot;abc&quot;;String str1 = new String(&quot;abc&quot;);System.out.println(str == str1); // falseSystem.out.println(str.equals(str1)); // true</code></pre><ul><li>str是直接将一个String对象附给str，由于底层是final，所以会将常量池（方法区）的已有对象返回，若不存在则会现在常量池中创建然后将地址返回</li><li>str1使用了new，将会在堆内存中新开辟一块内存用来存储</li></ul><h1 id="2-方法解析-amp-api"><a href="#2-方法解析-amp-api" class="headerlink" title="2.方法解析&amp;api"></a>2.方法解析&amp;api</h1><h2 id="2-1-equals（比较）"><a href="#2-1-equals（比较）" class="headerlink" title="2.1 equals（比较）"></a>2.1 equals（比较）</h2><pre><code class="java">public boolean equals(Object anObject) {        // 1.判断内存地址是否相同        if (this == anObject) {            return true;        }        // 2.待比较的对象是否是 String，如果不是 String，直接返回不相等        if (anObject instanceof String) {            // 注：instance使其父类也为true            String anotherString = (String)anObject;            int n = value.length;            // 3.两个字符串的长度是否相等，不等直接返回不相等            // 注：同一个类中可以直接调用private属性            if (n == anotherString.value.length) {                // 注：这里先用一个数组存下来value是为了下面代码的可读性                char v1[] = value;                char v2[] = anotherString.value;                int i = 0;                // 4.依次比较每个字符是否相等，若有一个不等，直接返回不相等                while (n-- != 0) {                    if (v1[i] != v2[i])                        return false;                    i++;                }                return true;            }        }        return false;    }</code></pre><h2 id="2-2-subString（截取）"><a href="#2-2-subString（截取）" class="headerlink" title="2.2 subString（截取）"></a>2.2 subString（截取）</h2><pre><code class="java">public String substring(int beginIndex, int endIndex) {  // 左闭右开    if (beginIndex &lt; 0) {            throw new StringIndexOutOfBoundsException(beginIndex);        }        if (endIndex &gt; value.length) {            throw new StringIndexOutOfBoundsException(endIndex);        }        int subLen = endIndex - beginIndex;        if (subLen &lt; 0) {            throw new StringIndexOutOfBoundsException(subLen);        }        // 调用构造函数        return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this                : new String(value, beginIndex, subLen);}</code></pre><pre><code class="JAVA">public String substring(int beginIndex)</code></pre><ul><li>substring 方法的底层使用的是字符数组范围截取的方法 ：<code>Arrays.copyOfRange(字符数组, 开始位置, 结束位置);</code> 从字符数组中进行一段范围的拷贝。</li><li>返回一个新的String</li></ul><h2 id="2-3-replace-amp-replaceAll（替换）"><a href="#2-3-replace-amp-replaceAll（替换）" class="headerlink" title="2.3 replace &amp; replaceAll（替换）"></a>2.3 replace &amp; replaceAll（替换）</h2><pre><code class="java">public String replace(char oldChar, char newChar) { // 字符替换，全部        if (oldChar != newChar) {            int len = value.length;            int i = -1;            char[] val = value; /* avoid getfield opcode */            // 1.整体遍历一遍，看有无需要被替换字符            while (++i &lt; len) {                if (val[i] == oldChar) {                    break;                }            }            // 2.1 若有，再创建一个新数组，然后替换后放入            if (i &lt; len) {                char buf[] = new char[len];                // 注：这里是先将 i 之前的直接赋给新数组buf                for (int j = 0; j &lt; i; j++) {                    buf[j] = val[j];                }                while (i &lt; len) {                    char c = val[i];                    // 注：这里一个？:就搞定                    buf[i] = (c == oldChar) ? newChar : c;                    i++;                }                // 重新构造一个String                return new String(buf, true);            }        }        // 2.2 若无，则直接返回本身        return this;    }</code></pre><pre><code class="JAVA">public String replaceFirst(String regex, String replacement) { // 只替换第一次出现的字符串      // 正则表达式      return Pattern.compile(regex).matcher(this).replaceFirst(replacement);}</code></pre><pre><code class="JAVA">public String replaceAll(String regex, String replacement) { // 字符串替换，全部        return Pattern.compile(regex).matcher(this).replaceAll(replacement);    }</code></pre><ul><li>当然我们想要删除某些字符，也可以使用 replace 方法，把想删除的字符替换成 “” 即可。</li><li>首字母大写转小写： <code>name.substring(0, 1).toUpperCase()/toLowerCase() + name.substring(1)</code></li></ul><h2 id="2-4-split-amp-join"><a href="#2-4-split-amp-join" class="headerlink" title="2.4 split &amp; join"></a>2.4 split &amp; join</h2><h3 id="split-（分割）"><a href="#split-（分割）" class="headerlink" title="split （分割）"></a>split （分割）</h3><p>字符串分割，返回string[]</p><pre><code class="java">public String[] split(String regex, int limit) // regex:分隔符 ，limit：拆分的个数public String[] split(String regex) // return split(regex, 0);</code></pre><pre><code class="java">String s =&quot;boo:and:foo&quot;;// 我们对 s 进行了各种拆分，演示的代码和结果是：s.split(&quot;:&quot;) 结果:[&quot;boo&quot;,&quot;and&quot;,&quot;foo&quot;]s.split(&quot;:&quot;,2) 结果:[&quot;boo&quot;,&quot;and:foo&quot;]s.split(&quot;:&quot;,5) 结果:[&quot;boo&quot;,&quot;and&quot;,&quot;foo&quot;]s.split(&quot;:&quot;,-2) 结果:[&quot;boo&quot;,&quot;and&quot;,&quot;foo&quot;]s.split(&quot;o&quot;) 结果:[&quot;b&quot;,&quot;&quot;,&quot;:and:f&quot;]s.split(&quot;o&quot;,2) 结果:[&quot;b&quot;,&quot;o:and:foo&quot;]</code></pre><h3 id="join-（连接）"><a href="#join-（连接）" class="headerlink" title="join （连接）"></a>join （连接）</h3><p>字符串拼接，返回字符串</p><pre><code class="java">// delimiter:分隔符，elements:数据（list/array)public static String join(CharSequence delimiter, CharSequence... elements) {        Objects.requireNonNull(delimiter);        Objects.requireNonNull(elements);        // 底层是StringBuilder.append（）        StringJoiner joiner = new StringJoiner(delimiter);        for (CharSequence cs: elements) {            joiner.add(cs);        }        return joiner.toString();    }</code></pre><pre><code class="java">List&lt;String&gt; names=new ArrayList&lt;String&gt;();names.add(&quot;1&quot;);names.add(&quot;2&quot;);names.add(&quot;3&quot;);System.out.println(String.join(&quot;-&quot;, names)); // 1-2-3String[] arrStr=new String[]{&quot;a&quot;,&quot;b&quot;,&quot;c&quot;};System.out.println(String.join(&quot;-&quot;, arrStr)); // a-b-c</code></pre><h2 id="2-5-indexOf-amp-charAt-（查找）"><a href="#2-5-indexOf-amp-charAt-（查找）" class="headerlink" title="2.5 indexOf &amp; charAt （查找）"></a>2.5 indexOf &amp; charAt （查找）</h2><h3 id="indexOf（返回索引）"><a href="#indexOf（返回索引）" class="headerlink" title="indexOf（返回索引）"></a>indexOf（返回索引）</h3><p>indexOf返回index，没找到就返回-1</p><pre><code class="java">public int indexOf(int ch, int fromIndex) {    final int max = value.length;    if (fromIndex &lt; 0) {        fromIndex = 0;    } else if (fromIndex &gt;= max) {        // Note: fromIndex might be near -1&gt;&gt;&gt;1.        return -1;    }    if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) {        final char[] value = this.value;        for (int i = fromIndex; i &lt; max; i++) {            if (value[i] == ch) {                return i;            }        }        return -1;    } else {        return indexOfSupplementary(ch, fromIndex);    }}</code></pre><h3 id="charAt（返回字符）"><a href="#charAt（返回字符）" class="headerlink" title="charAt（返回字符）"></a>charAt（返回字符）</h3><p>charAt返回指定索引的char</p><pre><code class="java">public char charAt(int index) {    if ((index &lt; 0) || (index &gt;= value.length)) {        throw new StringIndexOutOfBoundsException(index);    }    return value[index];}</code></pre><h2 id="2-6-toCharArray-amp-getBytes"><a href="#2-6-toCharArray-amp-getBytes" class="headerlink" title="2.6 toCharArray  &amp; getBytes"></a>2.6 toCharArray  &amp; getBytes</h2><h3 id="toCharArray（-gt-char数组）"><a href="#toCharArray（-gt-char数组）" class="headerlink" title="toCharArray（-&gt;char数组）"></a>toCharArray（-&gt;char数组）</h3><p>底层就是char数组存储的，所以直接返回char数组就行</p><p>注：这里不能直接将value返回，因为value是final不可变的，那么返回后使用者也无法操作</p><pre><code class="java">public char[] toCharArray() {           // 新建一个数组，拷贝过去返回        char result[] = new char[value.length];        // arraycopy(src, srcPos, dest, destPos, length)        System.arraycopy(value, 0, result, 0, value.length);        return result;}</code></pre><h3 id="getBytes（-gt-二进制数组）"><a href="#getBytes（-gt-二进制数组）" class="headerlink" title="getBytes（-&gt;二进制数组）"></a>getBytes（-&gt;二进制数组）</h3><p>在生活中，我们经常碰到这样的场景，进行二进制转化操作时，本地测试的都没有问题，到其它环境机器上时，有时会出现字符串<strong>乱码的情况</strong>，这个主要是因为在二进制转化操作时，并没有强制规定文件编码，而不同的环境默认的文件编码不一致导致的。</p><p>我们也写了一个 demo 来模仿一下字符串乱码：</p><pre><code class="java">String str  =&quot;nihao 你好 喬亂&quot;;// 字符串转化成 byte 数组，转化成ISO-8859-1编码的二进制数组// 注：ISO-8859-1编码格式不能支持所有的汉字，所以大概率乱码byte[] bytes = str.getBytes(&quot;ISO-8859-1&quot;);// byte 数组转化成字符串String s2 = new String(bytes);log.info(s2); </code></pre><pre><code>结果打印为：nihao ?? ??</code></pre><p>打印的结果为？？，这就是常见的乱码表现形式。是不是我把代码修改成 <code>String s2 = new String(bytes,&quot;ISO-8859-1&quot;);</code> 就可以了？这是不行的。主要是因为 ISO-8859-1 这种编码对中文的支持有限，导致中文会显示乱码。<strong>唯一的解决办法，就是在所有需要用到编码的地方，都统一使用 UTF-8，对于 String 来说，getBytes 和 new String 两个方法都会使用到编码</strong>，我们把这两处的编码替换成 UTF-8 后，打印出的结果就正常了。</p><h2 id="2-7-valueOf-amp-toString"><a href="#2-7-valueOf-amp-toString" class="headerlink" title="2.7  valueOf &amp; toString"></a>2.7  valueOf &amp; toString</h2><p>转换String：new String(~~)   或   valueOf()    或     toString() </p><pre><code class="java">// 注：value是个静态方法，可以将基本类型和Object转换为Stringpublic static String valueOf(Object obj) {    // 转换对象时调用的也是toString，但允许null    // 因此在做一些操作时要慎重，如Integer.valueOf(str);这是就会报错提示类型转换出错    return (obj == null) ? &quot;null&quot; : obj.toString(); // 当obj==null时，&quot;null&quot;}</code></pre><pre><code class="java">public static String valueOf(int i) {    // 先装箱成Integer再转换为String    return Integer.toString(i);}</code></pre><p><strong>总结：对象 –&gt; String ：toString      基本类型 –&gt; new String（~~）</strong></p><h2 id="2-8-getChars（拷贝）"><a href="#2-8-getChars（拷贝）" class="headerlink" title="2.8 getChars（拷贝）"></a>2.8 getChars（拷贝）</h2><p>将当前字符串（value）拷贝到另一个数组（dst）</p><pre><code class="java">public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {    if (srcBegin &lt; 0) {        throw new StringIndexOutOfBoundsException(srcBegin);    }    if (srcEnd &gt; value.length) {        throw new StringIndexOutOfBoundsException(srcEnd);    }    if (srcBegin &gt; srcEnd) {        throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);    }    // 直接调用System.arraycopy，value就是当前字符串    System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);}</code></pre><h1 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3.面试题"></a>3.面试题</h1><h2 id="3-1-如何解决-String-乱码的问题"><a href="#3-1-如何解决-String-乱码的问题" class="headerlink" title="3.1 如何解决 String 乱码的问题"></a>3.1 如何解决 String 乱码的问题</h2><p>答：乱码的问题的根源主要是两个：</p><ol><li>字符集不支持复杂汉字</li><li>二进制进行转化时字符集不匹配</li></ol><p>所以在 String 乱码时我们可以这么做：</p><ol><li>所有可以指定字符集的地方强制指定字符集，比如 new String 和 getBytes 这两个地方；</li><li>我们应该使用 UTF-8 这种能完整支持复杂汉字的字符集。</li></ol><h2 id="3-2-为什么大家都说-String-是不可变的"><a href="#3-2-为什么大家都说-String-是不可变的" class="headerlink" title="3.2 为什么大家都说 String 是不可变的"></a>3.2 为什么大家都说 String 是不可变的</h2><p>答：主要是因为 String 和保存数据的 char 数组，都被 final 关键字所修饰，所以是不可变的，</p><h2 id="3-3-String-一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题"><a href="#3-3-String-一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题" class="headerlink" title="3.3 String 一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题"></a>3.3 String 一些常用操作问题，如问如何分割、合并、替换、删除、截取等等问题</h2><p>答：这些都属于问 String 的基本操作题目，考察我们平时对 String 的使用熟练程度，可以参考上文。</p><h2 id="3-4-StringBuilder原理？为什么拼接效率高于String？"><a href="#3-4-StringBuilder原理？为什么拼接效率高于String？" class="headerlink" title="3.4 StringBuilder原理？为什么拼接效率高于String？"></a>3.4 StringBuilder原理？为什么拼接效率高于String？</h2><p>StringBuilder的方法实质上是调用父类AbstractStringBuilder的</p><pre><code class="java">abstract class AbstractStringBuilder implements Appendable, CharSequence {    // 实质上也是char[]，但他不是final的==&gt;也就是说，在数组空间够大的情况下，一个数组可以存多个字符串    char[] value;    // 记录当前容量，扩容的前提    int count;}</code></pre><p>StringBuilder的append方法实际上就是调用父类AbstractStringBuilder的append方法</p><pre><code class="java">public StringBuilder(String str) {    super(str.length() + 16);    append(str);}</code></pre><pre><code class="java">public AbstractStringBuilder append(String str) {    if (str == null)        return appendNull();    int len = str.length();    // 确保容量够，不够则扩容    // 扩容机制是2*capcity+2    ensureCapacityInternal(count + len);    // 将要append的string拷贝到当前数组，0表示从要拼接的字符串第一位开始拷贝    str.getChars(0, len, value, count);    count += len;    return this;}</code></pre><p><strong>接效率高的原因？</strong></p><ol><li><p>String是final的，一个数组只能给一个字符串使用，所以每拼接一次都要新创建然后拷贝一次数组</p></li><li><p>StringBuilder虽然底层也是字符数组，但是他不final，即允许在容量充足的情况下，一个数组可以被拼接多次；</p><p>相应的StringBuilder也要有扩容机制</p></li></ol><h2 id="3-5-StringBuilder与StringBuffer的区别？"><a href="#3-5-StringBuilder与StringBuffer的区别？" class="headerlink" title="3.5 StringBuilder与StringBuffer的区别？"></a>3.5 StringBuilder与StringBuffer的区别？</h2><p>答：StringBuffer线程安全，在append方法前面加上了synchronized，但相对效率就低了</p><pre><code class="java">public synchronized StringBuffer append(StringBuffer sb) {    toStringCache = null;    super.append(sb);    return this;}</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;反反复复发</summary>
    
    
    
    <category term="Java" scheme="https://github.com/YZHyaa/YZHyaa.github.io.git/categories/Java/"/>
    
    
    <category term="Java集合源码" scheme="https://github.com/YZHyaa/YZHyaa.github.io.git/tags/Java集合源码/"/>
    
  </entry>
  
</feed>
